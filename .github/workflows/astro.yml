＃用于构建和部署Astro站点到GitHub页面的示例工作流程
＃
＃要开始Astro，请参见：https：//docs.astro.build/en/getting-started/
＃
姓名：姓名：将Astro网站部署到页面

on:
  ＃在针对默认分支的推动下运行# Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  ＃允许您从“动作”选项卡手动运行此工作流程# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents:   内容：阅读
  pages:   页面：写
  id-token:   id-token：写

＃仅允许一个并发部署，跳过运行在运行内和最新排队之间排队。
＃但是，不要取消过程中的运行，因为我们希望允许这些生产部署完成。
并发：
  小组：“页面”
  取消过程：false

env ：
  BUILD_PATH: "."  build_path：“。”。 ＃不使用子文件夹的默认值# default value when not using subfolders
  ＃build_path：子文件夹# BUILD_PATH: subfolder

jobs:
  build:
    name:     名称：构建
    runs-on:     运行：Ubuntu-latest
    steps:
      - name:       - 名称：结帐
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
